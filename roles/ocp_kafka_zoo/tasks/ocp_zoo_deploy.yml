---

- name: Create directory for zookeeper config dir
  file:
    path: "{{ zoo_conf_dir }}/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0770
  with_items:
    - configmap
    - deploymentconfig
    - service

- name: Copy zookeeper configmap file to remote host
  copy:
    src: "files/zoo-configmap.yml"
    dest: "{{ zoo_conf_dir }}/configmap/configmap.yml"
    owner: root
    group: root
    mode: 0770

- name: Create the zookeeper service file by ansible template
  template:
    src: "{{ role_path }}/templates/zoo-service.j2"
    dest: "{{ zoo_conf_dir }}/service/zoo{{ item }}.yml"
    owner: root
    group: root
    mode: 0770
  with_sequence: start=1 end="{{ zoo_replica_size }}"

- name: Create the zookeeper deploymentconfig file by ansible template
  template:
    src: "{{ role_path }}/templates/zoo-deploymentconfig.j2"
    dest: "{{ zoo_conf_dir }}/deploymentconfig/zoo{{ item }}.yml"
    owner: root
    group: root
    mode: 0770
  with_sequence: start=1 end="{{ zoo_replica_size }}"

- name: Check already exist zookeeper node label on infra node
  shell: oc get nodes -l zoo-node={{ item }} | grep ocp-infra0{{ item }}.acom.local
  register: zoo_label
  ignore_errors: True
  with_sequence: start=1 end={{ zoo_replica_size }}
  changed_when: False

- name: Zookeeper label to node
  command: oc label node ocp-infra0{{ item.item }}.acom.local zoo-node={{ item.item }}
  when: item.rc != 0
  with_items: "{{ zoo_label.results }}"

- name: Check already exist zookeeper ConfigMap
  command: oc get cm/zoo-cfg -n {{ project_name }}
  register: zoo_cm
  ignore_errors: True
  changed_when: False

- name: Create zookeeper ConfigMap
  command: oc create -f {{ zoo_conf_dir }}/configmap -n {{ project_name }}
  when: zoo_cm.rc != 0

- name: Check already exist zookeeper ServiceAccount
  command: oc get sa/aggregated-zookeeper -n {{ project_name }}
  register: zoo_sa
  ignore_errors: True
  changed_when: False

- name: Create zookeeper ServiceAccount
  command: oc create sa aggregated-zookeeper -n {{ project_name }}
  when: zoo_sa.rc != 0

- name: Check zookeeper scc role
  shell: oc describe scc/privileged | grep system:serviceaccount:{{ project_name }}:aggregated-zookeeper
  register: zoo_scc_role
  ignore_errors: True
  changed_when: False

- name: Add privileged role to zookeeper user
  command: oc adm policy add-scc-to-user privileged -z aggregated-zookeeper -n {{ project_name }}
  when: zoo_scc_role.rc != 0
  
- name: Check already exist zookeeper Service
  command: oc get svc/zoo{{ item }} -n {{ project_name }}
  register: zoo_svc
  ignore_errors: True
  with_sequence: start=1 end={{ zoo_replica_size }}
  changed_when: False

- name: Create zookeeper Service
  command: oc create -f {{ zoo_conf_dir }}/service/zoo{{ item.item }}.yml -n {{ project_name }}
  when: item.rc != 0
  with_items: "{{ zoo_svc.results }}"

- name: Check already exist zookeeper DeploymentConfig
  command: oc get dc/zookeeper-{{ item }} -n {{ project_name }}
  register: zoo_dc
  ignore_errors: True
  with_sequence: start=1 end={{ zoo_replica_size }}
  changed_when: False

- name: Create zookeeper DeploymentConfig
  command: oc create -f {{ zoo_conf_dir }}/deploymentconfig/zoo{{ item.item }}.yml -n {{ project_name }}
  when: item.rc != 0
  with_items: "{{ zoo_dc.results }}"

- name: Rollout zookeeper container
  command: oc rollout latest zookeeper-{{ item }} -n {{ project_name }}
  with_sequence: start=1 end={{ zoo_replica_size }}

- name: Delete directory for zookeeper config dir
  file:
    path: "{{ zoo_conf_dir }}"
    state: absent

...
